write a simple local multi-player top-down shoot 'em up game using the Heaps.io engine

...

Creating a complete local multiplayer top-down shoot 'em up game using the Heaps.io engine requires a substantial amount of code and resources. However, I can provide you with a simplified outline and structure to get you started. Please note that this is a basic template and will require further development to become a fully functional game.

Before you begin, make sure you have Heaps.io set up and ready for development. You can refer to the Heaps.io documentation for installation and setup instructions.

1. **Setting Up the Project:**
   Create a new project folder and set up the necessary project files, assets, and folders. You'll need graphics for the player, enemies, bullets, and any other game elements.

2. **Main.hx:**
   ```haxe
   class Main extends hxd.App {
       override function init() {
           // Load assets, initialize game objects, and set up input handling here
       }

       override function update(dt: Float) {
           // Update game logic, handle collisions, and manage game state
       }

       static function main() {
           new Main();
       }
   }
   ```

3. **Player.hx:**
   ```haxe
   class Player extends h2d.Sprite {
       public function new() {
           super(Assets.getTexture("player.png"));
           // Set initial position, speed, and other properties
       }

       public function update(dt: Float) {
           // Handle player movement and shooting
       }
   }
   ```

4. **Enemy.hx:**
   ```haxe
   class Enemy extends h2d.Sprite {
       public function new() {
           super(Assets.getTexture("enemy.png"));
           // Set initial position, speed, and other properties
       }

       public function update(dt: Float) {
           // Handle enemy movement and behavior
       }
   }
   ```

5. **Bullet.hx:**
   ```haxe
   class Bullet extends h2d.Sprite {
       public function new() {
           super(Assets.getTexture("bullet.png"));
           // Set initial position, speed, and other properties
       }

       public function update(dt: Float) {
           // Handle bullet movement and collision
       }
   }
   ```

6. **Game.hx:**
   ```haxe
   class Game {
       var players: Array<Player>;
       var enemies: Array<Enemy>;
       var bullets: Array<Bullet>;

       public function new() {
           players = [];
           enemies = [];
           bullets = [];
       }

       public function update(dt: Float) {
           for (player in players) {
               player.update(dt);
           }
           
           for (enemy in enemies) {
               enemy.update(dt);
           }
           
           for (bullet in bullets) {
               bullet.update(dt);
           }
           
           // Implement collision detection and game mechanics here
       }
   }
   ```

7. **Input.hx:**
   ```haxe
   class Input {
       static var keys: hxd.KeyManager = hxd.KeyManager.instance;
       
       static function isKeyDown(keyCode: Int): Bool {
           return keys.isDown(keyCode);
       }
   }
   ```

8. **Main.hx (update function):**
   ```haxe
   override function update(dt: Float) {
       game.update(dt);

       // Check for player input and update player(s)
       if (Input.isKeyDown(hxd.Key.W)) {
           players[0].moveUp();
       }
       if (Input.isKeyDown(hxd.Key.A)) {
           players[0].moveLeft();
       }
       if (Input.isKeyDown(hxd.Key.S)) {
           players[0].moveDown();
       }
       if (Input.isKeyDown(hxd.Key.D)) {
           players[0].moveRight();
       }
       if (Input.isKeyDown(hxd.Key.SPACE)) {
           players[0].shoot();
       }
   }
   ```

9. **Multiplayer Setup:**
   To add local multiplayer support, you'll need to create additional player instances and handle their input separately.

10. **Rendering and Display:**
    Set up the rendering of game objects on the screen, handle camera movement, and manage the display of player scores and other relevant information.

11. **Sound and Effects:**
    Add sound effects and visual effects to enhance the gameplay experience.

12. **Game Over and Restart:**
    Implement a game over condition and provide an option to restart the game.

Remember that this is a basic outline, and you'll need to implement more details and features to create a complete game. Consult the Heaps.io documentation for more information on how to handle graphics, input, collision detection, and other game development aspects. Good luck with your game development journey!